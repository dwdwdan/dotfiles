#+TITLE: Awesome Config

* Table of Contents :toc:
- [[#rclua][rc.lua]]
  - [[#imports][Imports]]
  - [[#general-config][General Config]]
  - [[#layouts][Layouts]]
  - [[#keyboard-and-monitors][Keyboard and Monitors]]
    - [[#fix-issue-where-wibars-both-appear-on-same-screen-on-initial-boot][Fix issue where wibars both appear on same screen on initial boot]]
  - [[#taglist][Taglist]]
  - [[#tasklist][Tasklist]]
  - [[#wibars][Wibars]]
    - [[#widget-imports][Widget Imports]]
    - [[#main-screen-wibar][Main Screen Wibar]]
      - [[#general-config-1][General Config]]
      - [[#setup][Setup]]
    - [[#secondary-wibar][Secondary Wibar]]
  - [[#keybindings][Keybindings]]
    - [[#software-bindings][Software Bindings]]
    - [[#random-commands][Random Commands]]
    - [[#media-keys][Media Keys]]
    - [[#client-keys][Client Keys]]
    - [[#tag-based-bindings][Tag-Based Bindings]]
    - [[#client-buttons][Client Buttons]]
  - [[#rules][Rules]]
  - [[#signals][Signals]]
  - [[#borders][Borders]]
  - [[#notifications][Notifications]]
  - [[#autostart][Autostart]]
- [[#mythemelua][mytheme.lua]]
  - [[#imports-1][Imports]]
  - [[#fonts][Fonts]]
  - [[#colours][Colours]]
  - [[#gaps-and-borders][Gaps and borders]]
  - [[#taglist-colours][Taglist Colours]]
  - [[#hotkey-window][Hotkey Window]]
  - [[#titlebars][Titlebars]]

* rc.lua
  :PROPERTIES:
 :header-args: :tangle rc.lua
 :END:
** Imports
   This is an exact copy of the default rc.lua.
 #+begin_src lua :tangle rc.lua
 package.loaded["awful.hotkeys_popup.keys.tmux"]={}
 -- If LuaRocks is installed, make sure that packages installed through it are
 -- found (e.g. lgi). If LuaRocks is not installed, do nothing.
 pcall(require, "luarocks.loader")

 -- Standard awesome library
 local gears = require("gears")
 local awful = require("awful")
 require("awful.autofocus")
 -- Widget and layout library
 local wibox = require("wibox")
 -- Theme handling library
 local beautiful = require("beautiful")
 -- Notification library
 local naughty = require("naughty")
 local menubar = require("menubar")
 local hotkeys_popup = require("awful.hotkeys_popup")
 -- Enable hotkeys help widget for VIM and other apps
 -- when client with a matching name is opened:
 require("awful.hotkeys_popup.keys")

 -- Load Debian menu entries
 local debian = require("debian.menu")
 local has_fdo, freedesktop = pcall(require, "freedesktop")

 -- {{{ Error handling
 -- Check if awesome encountered an error during startup and fell back to
 -- another config (This code will only ever execute for the fallback config)
 if awesome.startup_errors then
	 naughty.notify({ preset = naughty.config.presets.critical,
		 title = "Oops, there were errors during startup!",
		 text = awesome.startup_errors })
 end

 -- Handle runtime errors after startup
 do
	 local in_error = false
	 awesome.connect_signal("debug::error", function (err)
		 -- Make sure we don't go into an endless error loop
		 if in_error then return end
		 in_error = true

		 naughty.notify({ preset = naughty.config.presets.critical,
			 title = "Oops, an error happened!",
			 text = tostring(err) })
		 in_error = false
	 end)
 end
 #+end_src

** General Config
    This section sets the theme and configures some basic variables.
  #+begin_src lua :tangle rc.lua
  -- Themes define colours, icons, font and wallpapers.
  beautiful.init("~/.config/awesome/mytheme.lua")
  -- Multiple monitor helper
  local xrandr=require("xrandr")
  local default_layout=2

  -- This is used later as the default terminal and editor to run.
  terminal = "alacritty"
  editor = os.getenv("EDITOR") or "editor"
  editor_cmd = terminal .. " -e " .. editor

  -- Default modkey.
  -- Usually, Mod4 is the key with a logo between Control and Alt.
  -- If you do not like this or do not have such a key,
  -- I suggest you to remap Mod4 to another key using xmodmap or other tools.
  -- However, you can use another modifier like Mod1, but it may interact with others.
  modkey = "Mod4"

  #+end_src
** Layouts
    Most of these aren't ever used, and I don't have a way to switch between them. They are mostly here just in case.
  #+begin_src lua :tangle rc.lua
  -- Table of layouts to cover with awful.layout.inc, order matters.
  awful.layout.layouts = {
	  awful.layout.suit.floating,
	  awful.layout.suit.tile,
	  awful.layout.suit.tile.left,
	  awful.layout.suit.tile.bottom,
	  awful.layout.suit.tile.top,
	  awful.layout.suit.fair,
	  awful.layout.suit.fair.horizontal,
	  awful.layout.suit.spiral,
	  awful.layout.suit.spiral.dwindle,
	  awful.layout.suit.max,
	  awful.layout.suit.max.fullscreen,
	  awful.layout.suit.magnifier,
	  awful.layout.suit.corner.nw,
	  -- awful.layout.suit.corner.ne,
	  -- awful.layout.suit.corner.sw,
	  -- awful.layout.suit.corner.se,
  }
  -- }}}

  #+end_src
** Keyboard and Monitors
   Controls keyboard layout and sets up my monitors
 #+begin_src lua :tangle rc.lua
 -- Keyboard map indicator and switcher
 mykeyboardlayout = awful.widget.keyboardlayout()

 -- Set up monitors
 awful.spawn.with_shell("xrandr --output HDMI-1-1 --primary --right-of eDP-1-1")
 #+end_src
*** TODO Fix issue where wibars both appear on same screen on initial boot
** Taglist
   This is default, it is lifted directly from the default.
 #+begin_src lua :tangle rc.lua
 -- Create a wibox for each screen and add it
 local taglist_buttons = gears.table.join(
	 awful.button({ }, 1, function(t) t:view_only() end),
	 awful.button({ modkey }, 1, function(t)
		 if client.focus then
			 client.focus:move_to_tag(t)
		 end
	 end),
	 awful.button({ }, 3, awful.tag.viewtoggle),
	 awful.button({ modkey }, 3, function(t)
		 if client.focus then
			 client.focus:toggle_tag(t)
		 end
	 end),
	 awful.button({ }, 4, function(t) awful.tag.viewnext(t.screen) end),
	 awful.button({ }, 5, function(t) awful.tag.viewprev(t.screen) end)
 )
 #+end_src
** Tasklist
   This sections creates and configures the task list. It isn't actually used but is here for future use if needed.
 #+begin_src lua :tangle rc.lua
 local tasklist_buttons = gears.table.join(
	 awful.button({ }, 1, function (c)
		 if c == client.focus then
			 c.minimized = true
		 else
			 c:emit_signal(
				 "request::activate",
				 "tasklist",
				 {raise = true}
			 )
		 end
	 end),
	 awful.button({ }, 3, function()
		 awful.menu.client_list({ theme = { width = 250 } })
	 end),
	 awful.button({ }, 4, function ()
		 awful.client.focus.byidx(1)
	 end),
	 awful.button({ }, 5, function ()
		 awful.client.focus.byidx(-1)
	 end))
 #+end_src
** Wibars
*** Widget Imports
    This imports all of the widgets I use on my wibar.
 #+begin_src lua :tangle rc.lua
 local logout_popup = require('awesome-wm-widgets.logout-popup-widget.logout-popup')
 local my_volume = require('my-widgets.volume')
 local my_battery = require('my-widgets.battery')
 local my_date = require('my-widgets.date')
 local my_pack = require('my-widgets.pack')
 local my_weather = require('my-widgets.weather')
 local sep = require('my-widgets.sep')
 local pad = require('my-widgets.pad')
 #+end_src
*** Main Screen Wibar
    This creates the wibar on my primary screen (indexed 1).
**** General Config
     This section sets up the tags, tasklist and systray widgets.
 #+begin_src lua :tangle rc.lua
 function makeMainScreenWiBar()
	 local thisscreen=screen[1]
	 awful.tag({"1","2","3","4","5","6","7","8","9"}, thisscreen, awful.layout.layouts[default_layout])
	 local mytasklist = awful.widget.tasklist {
		 screen  = thisscreen,
		 filter  = awful.widget.tasklist.filter.currenttags,
		 buttons = tasklist_buttons
	 }

	 local bar=awful.wibar({
		 position="top",
		 screen=thisscreen,
		 width=thisscreen.geometry.width,
		 })

	 local tray = wibox.widget.systray()
	 tray:set_screen(thisscreen)
	 local mytaglist = awful.widget.taglist {
		 screen  = thisscreen,
		 filter  = awful.widget.taglist.filter.all,
		 buttons = taglist_buttons
	 }
 #+end_src
**** Setup
     This tells awesome what widgets to include where. The right widgets are the main ones.
 #+begin_src lua :tangle rc.lua
	 bar:setup{
		 layout = wibox.layout.align.horizontal,
		 { -- Left widgets
			 layout = wibox.layout.fixed.horizontal,
			 tray,
			 mytaglist,
			 mypromptbox,
		 },
		 nil,
		 { -- Right widgets
			 layout = wibox.layout.fixed.horizontal,
			 sep, --TODO Can't decide if I like this one being here
			 my_weather, sep,
			 my_pack, sep,
			 my_date, sep,
			 my_volume, sep,
			 my_battery,
			 pad,
		 },
	 }
 end

 #+end_src
*** Secondary Wibar
    This is quite similar to [[Main Screen Wibar][above]] but only uses the textclock widget to display the time in the centre. As I don't look at this screen very often, it seems pointless to have all my widgets there as well.
 #+begin_src lua :tangle rc.lua
 local function makeSecondScreenWibar()
	 local thisscreen=screen[screen.count()]
	 awful.tag({"1","2","3","4","5","6","7","8","9"}, thisscreen, awful.layout.layouts[default_layout])
	 local bar=awful.wibar({
		 position="top",
		 screen=thisscreen,
		 width=thisscreen.geometry.width,
		 })

	 local mytaglist = awful.widget.taglist {
		 screen  = thisscreen,
		 filter  = awful.widget.taglist.filter.all,
		 buttons = taglist_buttons
	 }
	 bar:setup{
		 layout=wibox.layout.stack,
		 {
			 layout=wibox.layout.fixed.horizontal,
			 mytaglist
		 },
		 {
			 mytextclock,
			 valign="center",
			 halign="center",
			 layout=wibox.container.place
		 }
	 }
 end

 makeMainScreenWiBar()
 makeSecondScreenWibar()

 #+end_src
** Keybindings
   This section creates all of my global keybindings, the way I interact with awesome.
 #+begin_src lua :tangle rc.lua
   globalkeys = gears.table.join(
     awful.key({ modkey, }, "s",      hotkeys_popup.show_help,
       {description="show help", group="awesome"}),
  
     awful.key({ modkey, }, "Left",   awful.tag.viewprev,
       {description = "view previous", group = "tag"}),
  
     awful.key({ modkey, }, "Right",  awful.tag.viewnext,
       {description = "view next", group = "tag"}),
  
     awful.key({ modkey, }, "Escape", awful.tag.history.restore,
       {description = "go back", group = "tag"}),
  
     awful.key({ modkey, }, "j",
       function ()
         awful.client.focus.byidx( 1)
       end,
       {description = "focus next by index", group = "client"}
     ),
  
     awful.key({ modkey, }, "k",
       function ()
         awful.client.focus.byidx(-1)
       end,
       {description = "focus previous by index", group = "client"}
     ),
  
     awful.key({ modkey, }, "w", function () mymainmenu:show() end,
       {description = "show main menu", group = "awesome"}),
  
     -- Layout manipulation
     awful.key({ modkey, "Shift" }, "j", function () awful.client.swap.byidx(  1)    end,
       {description = "swap with next client by index", group = "client"}),
  
     awful.key({ modkey, "Shift" }, "k", function () awful.client.swap.byidx( -1)    end,
       {description = "swap with previous client by index", group = "client"}),
  
     awful.key({ modkey, "Control" }, "j", function () awful.screen.focus_relative( 1) end,
       {description = "focus the next screen", group = "screen"}),
  
     awful.key({ modkey, "Control" }, "k", function () awful.screen.focus_relative(-1) end,
       {description = "focus the previous screen", group = "screen"}),
  
     awful.key({ modkey, }, "u", awful.client.urgent.jumpto,
       {description = "jump to urgent client", group = "client"}),
  
     awful.key({ modkey, }, "Tab",
       function ()
         awful.client.focus.history.previous()
         if client.focus then
           client.focus:raise()
         end
       end,
       {description = "go back", group = "client"}),
  
     -- Standard program
  
     awful.key({ modkey, "Control" }, "r", awesome.restart,
       {description = "reload awesome", group = "awesome"}),
  
     awful.key({ modkey, "Shift" }, "q", awesome.quit,
       {description = "quit awesome", group = "awesome"}),
  
     awful.key({ modkey, }, "l",     function () awful.tag.incmwfact( 0.05)          end,
       {description = "increase master width factor", group = "layout"}),
  
     awful.key({ modkey, }, "h",     function () awful.tag.incmwfact(-0.05)          end,
       {description = "decrease master width factor", group = "layout"}),
  
     awful.key({ modkey, "Shift" }, "h",     function () awful.tag.incnmaster( 1, nil, true) end,
       {description = "increase the number of master clients", group = "layout"}),
  
     awful.key({ modkey, "Shift" }, "l",     function () awful.tag.incnmaster(-1, nil, true) end,
       {description = "decrease the number of master clients", group = "layout"}),
  
     awful.key({ modkey, "Control" }, "h",     function () awful.tag.incncol( 1, nil, true)    end,
       {description = "increase the number of columns", group = "layout"}),
  
     awful.key({ modkey, "Control" }, "l",     function () awful.tag.incncol(-1, nil, true)    end,
       {description = "decrease the number of columns", group = "layout"}),
  
     awful.key({ modkey, }, "space", function () awful.layout.inc( 1)                end,
       {description = "select next", group = "layout"}),
  
     awful.key({ modkey, "Shift" }, "space", function () awful.layout.inc(-1)                end,
       {description = "select previous", group = "layout"}),
  
     awful.key({ modkey, "Control" }, "n",
       function ()
         local c = awful.client.restore()
         -- Focus restored client
         if c then
           c:emit_signal(
             "request::activate", "key.unminimize", {raise = true}
           )
         end
       end,
       {description = "restore minimized", group = "client"}),
  
 #+end_src
*** Software Bindings
    These binding open some software for me to use. This is how I access most of my applications.
 #+begin_src lua :tangle rc.lua
     -- Dmenu
     awful.key({ modkey }, "r",     function ()
       awful.util.spawn("dmenu_run -fn 'Lato, Light-14' -sb '#282828' -sf '#ffffff' -nb '#141414' -nf '#aaaaaa'") end,
       {description = "run dmenu", group = "launcher"}),
  
     awful.key({ modkey, "Control", "Shift" }, "m", function() xrandr.xrandr() end,
       {description = "cycle through multimonitor", group = "utility"}),
  
     awful.key({ modkey, }, "Return", function () awful.spawn(terminal) end,
       {description = "open a terminal", group = "software"}),
  
     awful.key({ modkey }, "b",     function ()
       awful.util.spawn("firefox")
       end,
       {description = "Firefox", group = "software"}),
  
     awful.key({ modkey }, "t",     function ()
       awful.util.spawn("thunderbird")
       end,
       {description = "Thunderbird", group = "software"}),
  
     awful.key({ modkey }, "e",     function ()
       awful.util.spawn("emacs")
       end,
       {description = "Emacs", group = "software"}),
  
     awful.key({ modkey, "Shift" }, "m",     function ()
       awful.util.spawn("firefox https://accounts.spotify.com/en/login?continue=https:%2F%2Fopen.spotify.com%2F")
       end,
       {description = "Spotify Web Client", group = "software"}),
  
     awful.key({ modkey }, "d",     function ()
       awful.util.spawn("ferdi")
       end,
       {description = "Ferdi - Messaging", group = "software"}),
  
     awful.key({ modkey, "Control" }, "f",     function ()
       awful.spawn("alacritty -e ranger") end,
       {description = "Ranger", group = "software"}),
  
     awful.key({ modkey, }, "f",     function ()
       awful.spawn("pcmanfm") end,
       {description = "PCMan File Manager", group = "software"}),
  
     awful.key({ modkey }, "a",     function ()
       awful.spawn("pavucontrol") end,
       {description = "Audio Controls", group = "software"}),
  
 #+end_src
*** Random Commands
    These are commands that don't fit anywhere else in this section.
 #+begin_src lua :tangle rc.lua
     awful.key({ modkey , "Control" }, "b",     function ()
       awful.spawn.with_shell("feh --recursive --randomize --bg-fill ~/wallpapers") end,
       {description = "Change Background", group = "utility"}),
  
     awful.key({ modkey }, "p",     function ()
       logout_popup.launch{bg_color='#141414',text_color='#aaaaaa',accent_color='#91231c'} end,
       {description = "Show Shutdown Menu", group = "awesome"}),
  
     awful.key({ modkey }, "x",
       function ()
         awful.prompt.run {
           prompt       = "Run Lua code: ",
           textbox      = awful.screen.focused().mypromptbox.widget,
           exe_callback = awful.util.eval,
           history_path = awful.util.get_cache_dir() .. "/history_eval"
         }
       end,
       {description = "lua execute prompt", group = "awesome"}),
  
 #+end_src
*** Media Keys
    These are my media keys. They use playerctl and amixer to control the audio. The volume controls work in increments of 2%
 #+begin_src lua :tangle rc.lua
     awful.key({ }, "XF86AudioStop" ,     function ()
       awful.util.spawn("firefox https://accounts.spotify.com/en/login?continue=https:%2F%2Fopen.spotify.com%2F") end,
       {description = "Open Spotify", group = "Audio"}),
   
     awful.key({ }, "XF86AudioPrev" ,     function ()
     awful.spawn.with_shell("playerctl previous", false) end,
       {description = "Previous Track", group = "Audio"}),
   
     awful.key({ }, "XF86AudioNext" ,     function ()
     awful.spawn.with_shell("playerctl next", false) end,
       {description = "Next Track", group = "Audio"}),
     
     awful.key({ }, "XF86AudioPlay" ,     function ()
     awful.spawn.with_shell("playerctl play-pause", false) end,
       {description = "Play/Pause", group = "Audio"}),
   
     awful.key({ }, "XF86AudioRaiseVolume" ,     function ()
     awful.spawn.with_shell("amixer -D pulse sset Master 2%+", false) end,
       {description = "Increase Volume", group = "Audio"}),
   
     awful.key({ }, "XF86AudioLowerVolume" ,     function ()
     awful.spawn.with_shell("amixer -D pulse sset Master 2%-", false) end,
       {description = "Decrease Volume", group = "Audio"}),
   
     awful.key({ }, "XF86AudioMute" ,     function ()
     awful.spawn.with_shell("amixer -D pulse sset Master toggle", false) end,
       {description = "Mute Volume", group = "Audio"})
   )
   
 #+end_src
*** Client Keys
    These keys are used to control the behaviour of the focused client (window) 
  #+begin_src lua :tangle rc.lua
  clientkeys = gears.table.join(

	  awful.key({ modkey, "Shift" }, "f",
		  function (c)
			  c.fullscreen = not c.fullscreen
			  c:raise()
		  end,
		  {description = "toggle fullscreen", group = "client"}),

	  awful.key({ modkey }, "q",      function (c) c:kill()                         end,
		  {description = "close", group = "client"}),

	  awful.key({ modkey, "Control" }, "space",  awful.client.floating.toggle                     ,
		  {description = "toggle floating", group = "client"}),

	  awful.key({ modkey, "Control" }, "Return", function (c) c:swap(awful.client.getmaster()) end,
		  {description = "move to master", group = "client"}),

	  awful.key({ modkey,           }, "o",      function (c) c:move_to_screen()               end,
		  {description = "move to screen", group = "client"}),

	  awful.key({ modkey,           }, "t",      function (c) c.ontop = not c.ontop            end,
		  {description = "toggle keep on top", group = "client"}),

	  awful.key({ modkey,           }, "n",
		  function (c)
			  -- The client currently has the input focus, so it cannot be
			  -- minimized, since minimized clients can't have the focus.
			  c.minimized = true
		  end ,
		  {description = "minimize", group = "client"}),

	  awful.key({ modkey,           }, "m",
		  function (c)
			  c.maximized = not c.maximized
			  c:raise()
		  end ,
		  {description = "(un)maximize", group = "client"})
  )

  #+end_src
*** Tag-Based Bindings
    This bindings apply to each tag. They include tag switching, moving and viewing.
  #+begin_src lua :tangle rc.lua
  -- Bind all key numbers to tags.
  -- Be careful: we use keycodes to make it work on any keyboard layout.
  -- This should map on the top row of your keyboard, usually 1 to 9.
  for i = 1, 9 do
	  globalkeys = gears.table.join(globalkeys,
		  -- View tag only.
		  awful.key({ modkey }, "#" .. i + 9,
			  function ()
				  local screen = awful.screen.focused()
				  local tag = screen.tags[i]
				  if tag then
					  tag:view_only()
				  end
			  end,
			  {description = "view tag #"..i, group = "tag"}),
		  -- Toggle tag display.
		  awful.key({ modkey, "Control" }, "#" .. i + 9,
			  function ()
				  local screen = awful.screen.focused()
				  local tag = screen.tags[i]
				  if tag then
					  awful.tag.viewtoggle(tag)
				  end
			  end,
			  {description = "toggle tag #" .. i, group = "tag"}),
		  -- Move client to tag.
		  awful.key({ modkey, "Shift" }, "#" .. i + 9,
			  function ()
				  if client.focus then
					  local tag = client.focus.screen.tags[i]
					  if tag then
						  client.focus:move_to_tag(tag)
					  end
				  end
			  end,
			  {description = "move focused client to tag #"..i, group = "tag"}),
		  -- Toggle tag on focused client.
		  awful.key({ modkey, "Control", "Shift" }, "#" .. i + 9,
			  function ()
				  if client.focus then
					  local tag = client.focus.screen.tags[i]
					  if tag then
						  client.focus:toggle_tag(tag)
					  end
				  end
			  end,
			  {description = "toggle focused client on tag #" .. i, group = "tag"})
	  )
  end
  #+end_src
*** Client Buttons
    I'm not entirely sure what this does ngl. Took from the default rc.lua
  #+begin_src lua :tangle rc.lua
  clientbuttons = gears.table.join(
	  awful.button({ }, 1, function (c)
		  c:emit_signal("request::activate", "mouse_click", {raise = true})
	  end),
	  awful.button({ modkey }, 1, function (c)
		  c:emit_signal("request::activate", "mouse_click", {raise = true})
		  awful.mouse.client.move(c)
	  end),
	  awful.button({ modkey }, 3, function (c)
		  c:emit_signal("request::activate", "mouse_click", {raise = true})
		  awful.mouse.client.resize(c)
	  end)
  )

  -- Set keys
  root.keys(globalkeys)
  #+end_src
** Rules
   These are the rules used to control behaviour of clients (windows). They are mostly default, though I have removed the title bars from windows.
 #+begin_src lua :tangle rc.lua
 -- {{{ Rules
 -- Rules to apply to new clients (through the "manage" signal).
 awful.rules.rules = {
	 -- All clients will match this rule.
	 { rule = { },
		 properties = { border_width = beautiful.border_width,
			 border_color = beautiful.border_normal,
			 focus = awful.client.focus.filter,
			 raise = true,
			 keys = clientkeys,
			 buttons = clientbuttons,
			 screen = awful.screen.preferred,
			 placement = awful.placement.no_overlap+awful.placement.no_offscreen
		 }
	 },

	 -- Floating clients.
	 { rule_any = {
		 instance = {
			 "DTA",  -- Firefox addon DownThemAll.
			 "copyq",  -- Includes session name in class.
			 "pinentry",
		 },
		 class = {
			 "Arandr",
			 "Blueman-manager",
			 "Gpick",
			 "Kruler",
			 "MessageWin",  -- kalarm.
			 "Sxiv",
			 "Tor Browser", -- Needs a fixed window size to avoid fingerprinting by screen size.
			 "Wpa_gui",
			 "veromix",
			 "xtightvncviewer"},

		 -- Note that the name property shown in xprop might be set slightly after creation of the client
		 -- and the name shown there might not match defined rules here.
		 name = {
			 "Event Tester",  -- xev.
		 },
		 role = {
			 "AlarmWindow",  -- Thunderbird's calendar.
			 "ConfigManager",  -- Thunderbird's about:config.
			 "pop-up",       -- e.g. Google Chrome's (detached) Developer Tools.
		 }
	 }, properties = { floating = true }},

	 -- Add titlebars to normal clients and dialogs
	 { rule_any = {type = { "normal", "dialog" }
	 }, properties = { titlebars_enabled = false }
	 },

	 -- Set Firefox to always map on the tag named "2" on screen 1.
	 -- { rule = { class = "Firefox" },
	 --   properties = { screen = 1, tag = "2" } },
 }
 -- }}}

 #+end_src
** Signals
   This controls how clients are created.
 #+begin_src lua :tangle rc.lua
 -- Signal function to execute when a new client appears.
 client.connect_signal("manage", function (c)
	 -- Set the windows at the slave,
	 -- i.e. put it at the end of others instead of setting it master.
	 -- if not awesome.startup then awful.client.setslave(c) end

	 if awesome.startup
		 and not c.size_hints.user_position
		 and not c.size_hints.program_position then
		 -- Prevent clients from being unreachable after screen count changes.
		 awful.placement.no_offscreen(c)
	 end
 end)
 #+end_src
** Borders
   This sets the border colours for focused and unfocused clients
 #+begin_src lua :tangle rc.lua
 client.connect_signal("focus", function(c) c.border_color = beautiful.border_focus end)
 client.connect_signal("unfocus", function(c) c.border_color = beautiful.border_normal end)
 #+end_src
** Notifications
   This sets the maximum size of notifications. This mostly exists to prevent a notification from covering the entire screen.
 #+begin_src lua :tangle rc.lua
 beautiful.notification_max_width=300
 beautiful.notification_max_height=100
 #+end_src
** Autostart
  These are commands to be run when awesome is started. Compton is my compositor, and I use feh to set my desktop wallpapers. I use a variation on [[https://github.com/makccr/wallpapers][this github repo]] with wallpapers I don't like removed.
 #+begin_src lua :tangle rc.lua
 -- Autostart Applications
 awful.spawn.with_shell("compton -b -f")
 awful.spawn.with_shell("feh --recursive --randomize --bg-fill ~/wallpapers")
 awful.spawn.with_shell("numlockx on")
 --awful.spawn("thunderbird",{tag="<Email>"})
 #+end_src

* mytheme.lua
  :PROPERTIES:
 :header-args: :tangle mytheme.lua
 :END:
  This file sets the colours and fonts.
** Imports
   This imports the needed packages
#+begin_src lua
  local theme_assets = require("beautiful.theme_assets")
  local xresources = require("beautiful.xresources")
  local dpi = xresources.apply_dpi
  
  local gfs = require("gears.filesystem")
  local themes_path = gfs.get_themes_dir()
  
  local theme = {}
  #+end_src
** Fonts
   This specifies the fonts and sizes to use. The =sep_font= is the font used for the separators. It has to be slightly bigger so it looks right.
  #+begin_src lua
  theme.font="Lato, Light 14"
  theme.mono_font="JetBrains Mono 14"
  theme.sep_font="JetBrains Mono 18"
  #+end_src
** Colours
   This sets the majority of the colours for the theme. They are mostly greyscale, and are in a 'dark mode'. The separator colour is a lot paler than the others so they stand out less.
  #+begin_src lua
  theme.bg_normal     = "#141414"
  theme.bg_focus      = "#202020"
  theme.bg_urgent     = "#ff0000"
  theme.bg_minimize   = "#444444"
  theme.bg_widget     = theme.bg_normal
  theme.bg_seperator  = theme.bg_normal
  theme.bg_systray    = theme.bg_widget
  
  theme.fg_normal     = "#aaaaaa"
  theme.fg_focus      = "#ffffff"
  theme.fg_urgent     = "#ffffff"
  theme.fg_minimize   = "#ffffff"
  theme.fg_widget     = theme.fg_normal
  theme.fg_seperator  = "#666666"
  #+end_src
** Gaps and borders
   I like to have gaps around my windows, even when there is only 1. The border colours are chosen to be somewhat subtle but noticeable when they change.
  #+begin_src lua
  theme.useless_gap   = dpi(10)
  theme.gap_single_client=true
  theme.border_width  = dpi(2)
  theme.border_normal = "#000000"
  theme.border_focus  = "#444444"
  theme.border_marked = "#91231c"
  #+end_src
** Taglist Colours
   This sets the colours for the taglist, which is on the left hand side of both wibars. These are mostly the same as the general colours, but they have separate settings for easier customisation.
  #+begin_src lua
  theme.taglist_bg_empty = theme.bg_normal
  theme.taglist_fg_empty = theme.bg_normal
  theme.taglist_bg_occupied = theme.bg_normal
  theme.taglist_fg_occupied = theme.bg_normal
  theme.taglist_bg_focus = theme.bg_focus
  theme.taglist_fg_focus = theme.bg_focus
  #+end_src
** Hotkey Window
   This controls the config for the help window accessed with =mod4+s=.
  #+begin_src lua
  theme.hotkeys_font="SpaceMono for Powerline 14"
  theme.hotkeys_description_font="Lato 14"
  theme.hotkeys_modifiers_fg="#bbbbbb"
  theme.hotkeys_fg="#ffffff"
  #+end_src
** Titlebars
   This section doesn't do anything in most cases as titlebars are not shown with my config. However they are here for the few windows that do.
  #+begin_src lua
  theme.menu_submenu_icon = themes_path.."default/submenu.png"
  theme.menu_height = dpi(15)
  theme.menu_width  = dpi(100)
  
  
  -- Define the image to load
  theme.titlebar_close_button_normal = themes_path.."default/titlebar/close_normal.png"
  theme.titlebar_close_button_focus  = themes_path.."default/titlebar/close_focus.png"
  
  theme.titlebar_minimize_button_normal = themes_path.."default/titlebar/minimize_normal.png"
  theme.titlebar_minimize_button_focus  = themes_path.."default/titlebar/minimize_focus.png"
  
  theme.titlebar_ontop_button_normal_inactive = themes_path.."default/titlebar/ontop_normal_inactive.png"
  theme.titlebar_ontop_button_focus_inactive  = themes_path.."default/titlebar/ontop_focus_inactive.png"
  theme.titlebar_ontop_button_normal_active = themes_path.."default/titlebar/ontop_normal_active.png"
  theme.titlebar_ontop_button_focus_active  = themes_path.."default/titlebar/ontop_focus_active.png"
  
  theme.titlebar_sticky_button_normal_inactive = themes_path.."default/titlebar/sticky_normal_inactive.png"
  theme.titlebar_sticky_button_focus_inactive  = themes_path.."default/titlebar/sticky_focus_inactive.png"
  theme.titlebar_sticky_button_normal_active = themes_path.."default/titlebar/sticky_normal_active.png"
  theme.titlebar_sticky_button_focus_active  = themes_path.."default/titlebar/sticky_focus_active.png"
  
  theme.titlebar_floating_button_normal_inactive = themes_path.."default/titlebar/floating_normal_inactive.png"
  theme.titlebar_floating_button_focus_inactive  = themes_path.."default/titlebar/floating_focus_inactive.png"
  theme.titlebar_floating_button_normal_active = themes_path.."default/titlebar/floating_normal_active.png"
  theme.titlebar_floating_button_focus_active  = themes_path.."default/titlebar/floating_focus_active.png"
  
  theme.titlebar_maximized_button_normal_inactive = themes_path.."default/titlebar/maximized_normal_inactive.png"
  theme.titlebar_maximized_button_focus_inactive  = themes_path.."default/titlebar/maximized_focus_inactive.png"
  theme.titlebar_maximized_button_normal_active = themes_path.."default/titlebar/maximized_normal_active.png"
  theme.titlebar_maximized_button_focus_active  = themes_path.."default/titlebar/maximized_focus_active.png"
  
  theme.wallpaper = themes_path.."default/background.png"
  
  -- You can use your own layout icons like this:
  theme.layout_fairh = themes_path.."default/layouts/fairhw.png"
  theme.layout_fairv = themes_path.."default/layouts/fairvw.png"
  theme.layout_floating  = themes_path.."default/layouts/floatingw.png"
  theme.layout_magnifier = themes_path.."default/layouts/magnifierw.png"
  theme.layout_max = themes_path.."default/layouts/maxw.png"
  theme.layout_fullscreen = themes_path.."default/layouts/fullscreenw.png"
  theme.layout_tilebottom = themes_path.."default/layouts/tilebottomw.png"
  theme.layout_tileleft   = themes_path.."default/layouts/tileleftw.png"
  theme.layout_tile = themes_path.."default/layouts/tilew.png"
  theme.layout_tiletop = themes_path.."default/layouts/tiletopw.png"
  theme.layout_spiral  = themes_path.."default/layouts/spiralw.png"
  theme.layout_dwindle = themes_path.."default/layouts/dwindlew.png"
  theme.layout_cornernw = themes_path.."default/layouts/cornernww.png"
  theme.layout_cornerne = themes_path.."default/layouts/cornernew.png"
  theme.layout_cornersw = themes_path.."default/layouts/cornersww.png"
  
  -- Generate Awesome icon:
  theme.awesome_icon = theme_assets.awesome_icon(
      theme.menu_height, theme.bg_focus, theme.fg_focus
  )
  
  -- Define the icon theme for application icons. If not set then the icons
  -- from /usr/share/icons and /usr/share/icons/hicolor will be used.
  theme.icon_theme = nil
  
  return theme
#+end_src

#  LocalWords:  rc lua Taglist Tasklist Wibars mytheme taglist wibars
