#+TITLE: Init.el
#+PROPERTY: header-args :tangle init.el
* Package Manager
Set up use-package, and the package archives
#+begin_src emacs-lisp
  (require `package)
  (setq package-archives `(("melpa" . "https://melpa.org/packages/")
                           ("elpa" . "https://elpa.gnu.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-install `use-package))

  (require `use-package)
  (setq use-package-always-ensure t)
#+end_src

* Fonts and Cosmetics
** Fonts
We set the fonts in the ~after-init-hook~ and the ~server-after-make-frame-hook~ so that they are set whenever a frame is created. This is a way to avoid issues with emacs started with systemd. If you use ~set-face-attribute~ with no active frame, it does nothing, so we delay it until a frame is created. This means that it is set more often than required, but the extra overhead is negligible. We also set backup emoji fonts here.
#+begin_src emacs-lisp
  (defun dan/set-fonts()
    ;; We only want to set fonts in a graphic environment
    (when (display-graphic-p)
      (set-face-attribute `default nil :font "Jetbrains mono" :height 150)
      (set-face-attribute `variable-pitch nil :font "Noto sans" :height 150)
      (copy-face `default `fixed-pitch)
      ;; Set emoji and glyph fonts
      (set-fontset-font t 'symbol "Apple Color Emoji" nil 'prepend)
      (set-fontset-font t 'symbol "Noto Color Emoji" nil 'prepend)
      (set-fontset-font t 'symbol "Segoe UI Emoji" nil 'prepend)
      (set-fontset-font t 'symbol "UbuntuMono Nerd Font" nil 'prepend)))

  ;; Set the fonts when we initialize
  (add-hook `after-init-hook `dan/set-fonts)
  ;; Set the fonts when we create a new frame from daemon mode
  (add-hook `server-after-make-frame-hook `dan/set-fonts)
#+end_src
** Hide unnecessary things
#+begin_src emacs-lisp
  ;; Make emacs more minimal looking
  (setq inhibit-startup-message t)      ;; Don't load startup screen
  (scroll-bar-mode -1)                  ;; Don't show scroll bar
  (tool-bar-mode -1)                    ;; Don't show tool bar
  (tooltip-mode -1)                     ;; Don't show tooltips
  (menu-bar-mode -1)                    ;; Don't show Menu Bar
  (set-fringe-mode 10)
#+end_src
** Line numbers
Set emacs to display line numbers, except when in org mode or one of the various shell modes.
#+begin_src emacs-lisp
  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode `(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda() (display-line-numbers-mode 0))))
#+end_src

** Colour Scheme
#+begin_src emacs-lisp
  ;; Set the colour scheme
  (use-package doom-themes
    :config
    (load-theme `doom-dracula t))
#+end_src

* Evil Mode
Set up evil. I use ~evil-collection~ to have evil bindings in things like magit.
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump t)
    :config
    (evil-mode 1))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src
* Helpful
Helpful is a tool for better formatting the output of ~describe-\*~ functions.
I use ivy/counsel for the describe-* functions. This is because I can't work out how helm works with these. 
#+begin_src emacs-lisp
  (use-package ivy)

  (use-package counsel)

  (use-package helpful
    :custom
    (counsel-describe-function-function `helpful-callable)
    (counsel-describe-variable-function `helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src

* Helm
I use helm as my main completion engine as it is what I'm used to from previous use of doom emacs and spacemacs
#+begin_src emacs-lisp
  (use-package helm
    :bind
    ("M-x" . helm-M-x)
    ("C-x b" . helm-buffers-list)
    ("C-x C-f" . helm-find-files))

  (use-package helm-ag)
#+end_src

* Keybindings
** General
This creates the leader key definer which is used later throughout the file
#+begin_src emacs-lisp
  (use-package general
    :config
    (general-create-definer dan/leader-keys
      :keymaps `(normal visual emacs)
      :prefix "SPC"))
#+end_src
Sets up global key mappings
#+begin_src emacs-lisp
  (general-define-key
   "<escape>" `keyboard-escape-quit)
#+end_src

** Hydra
Hydra is a package that allows you to make mappings that stick around. Fpr example, when ~hydra-text-scale~ is run, you can then use ~j~ and ~k~ to zoom in and out. This is different to normal as you don't have to  invoke ~hydra-text-scale~ every time. You can also use a numerical prefix (~5j~ for example) to do this repeatedly without spamming the button. This is mostly here as an example at the moment, but I thought it would be useful to include for the future.
#+begin_src emacs-lisp
  (use-package hydra)
  (defhydra hydra-text-scale (:timeout 4)
    "Scale Text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("q" nil "quit" :exit t))

  (dan/leader-keys
    "ts" `(hydra-text-scale/body :whichkey "scale text"))
#+end_src

* Org
#+begin_src emacs-lisp
  (defun dan/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1)
    (setq evil-auto-indent nil)
    (dan/set-org-fonts)
    (ivy-mode 1))

  (use-package org
    :hook (org-mode . dan/org-mode-setup)
    :config
    (setq org-ellipsis " ▼"))
#+end_src

** Visuals
#+begin_src emacs-lisp

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list `("◉")))

  ;; Changes bullets into bullets
  (font-lock-add-keywords `org-mode
                          `(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
#+end_src
*** Heading Fonts
Set the fonts for org headings to be bigger and bold
#+begin_src emacs-lisp
  (defun dan/set-org-fonts ()
    (dolist (face `((org-level-1 . 1.5)
                    (org-level-2 . 1.4)
                    (org-level-3 . 1.3)
                    (org-level-4 . 1.2)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.05)))
      (set-face-attribute (car face) nil :weight `bold :height (cdr face)))
#+end_src
*** Fixed width sections
Since ~variable-pitch-mode~ is activated in an ~org-mode-hook~ we have to set specific sections of an org document to use the fixed pitch font. We also set the background for code blocks here.
#+begin_src emacs-lisp
  (set-face-attribute `org-document-title nil :height 300)
  (set-face-attribute `org-block nil :foreground nil :background "#353848" :inherit `fixed-pitch)
  (set-face-attribute `org-code nil :inherit `(shadow fixed-pitch))
  (set-face-attribute `org-table nil :background "#353848" :inherit `(shadow fixed-pitch))
  (set-face-attribute `org-indent nil :inherit `(org-hide fixed-pitch))
  (set-face-attribute `org-verbatim nil :inherit `(shadow fixed-pitch))
  (set-face-attribute `org-special-keyword nil :inherit `(font-lock-comment-face fixed-pitch))
  (set-face-attribute `org-meta-line nil :inherit `(font-lock-comment-face fixed-pitch))
  (set-face-attribute `org-checkbox nil :inherit `fixed-pitch))
#+end_src

*** Visual Fill Mode
Make it so org mode does not fill the entire width of the screen. This makes org seem more like a normal document editor, like Microsoft Word
#+begin_src emacs-lisp
  (defun dan/org-mode-visual-fill()
    (setq visual-fill-column-width 125)
    (setq visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . dan/org-mode-visual-fill))

#+end_src

** Function
*** Agenda
#+begin_src emacs-lisp
  (setq org-agenda-files
        `("~/Dropbox/Org/todo.org"))
  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done `time)
  (setq org-log-into-drawer t)

  (defun dan/org-agenda-config ()
    (define-key org-agenda-mode-map "j" 'evil-next-line)
    (define-key org-agenda-mode-map "k" 'evil-previous-line))

  (add-hook `org-agenda-mode-hook `dan/org-agenda-config)
#+end_src

*** Todolists
#+begin_src emacs-lisp
  (setq org-todo-keywords `((sequence "TODO(t)" "IN PROGRESS(p)" "|" "DONE(d!)")))
#+end_src

*** Refile
#+begin_src emacs-lisp
  (setq org-refile-targets
        `(("~/Dropbox/Org/archive.org" :maxlevel . 1)
          ("~/Dropbox/Org/todo.org" :maxlevel . 1)))

  (advice-add `org-refile :after `org-save-all-org-buffers)
#+end_src

*** Capture Templates
#+begin_src emacs-lisp
  (setq org-capture-templates
        `(("t" "Todo" entry (file+headline "~/Dropbox/Org/todo.org" "Inbox") "* TODO %?\n %U\n %a\n %i" :empty-lines 1)))
#+end_src

*** Org-projectile
#+begin_src emacs-lisp
  (use-package org-projectile
    :config
    (org-projectile-per-project)
    (setq org-projectile-per-project-filepath "TODO.org")
    (setq org-agenda-files (append org-agenda-files (org-projectile-todo-files))))
#+end_src

*** Keys
#+begin_src emacs-lisp
  (dan/leader-keys
    "o" `(:ignore t :which-key "Org")
    "oc" `(org-capture :which-key "Capture")
    "oa" `(org-agenda :which-key "Agenda")
    "op" `(org-projectile-capture-for-current-project :which-key "Project Capture")
    "pc" `(org-projectile-capture-for-current-project :which-key "Org Capture"))
#+end_src

* Snippets
I use yasnippets for my snippets, the folder they are stored in is [[file:snippets][here]]. Each snippet has it's own file, organised into types by folder.
#+begin_src emacs-lisp
  (use-package yasnippet
    :init
    (yas-global-mode 1)
    (setq yas-snippet-dirs `("~/.emacs.d/snippets")))
#+end_src
* Languages
** LSP
#+begin_src emacs-lisp
  (defun dan/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments `(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode 1))

  (add-hook `lsp-mode `dan/lsp-mode-setup)

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :init
    (setq lsp-keymap-prefix "C-c l")
    :config
    (lsp-enable-which-key-integration t))

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode))
#+end_src
** Python
#+begin_src emacs-lisp
  (add-hook `python-mode `lsp)
#+end_src
** LaTeX
This section was adapted from [[https://www.reddit.com/r/emacs/comments/cd6fe2/how_to_make_emacs_a_latex_ide/?utm_source=share&utm_medium=ios_app&utm_name=iossmf][this reddit thead]]
#+begin_src emacs-lisp
        (use-package pdf-tools
          :ensure t
          :config
          (pdf-tools-install)
          (setq-default pdf-view-display-size 'fit-page)
          (setq pdf-annot-activate-created-annotations t)
          (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
          (define-key pdf-view-mode-map (kbd "C-r") 'isearch-backward)
          (add-hook 'pdf-view-mode-hook (lambda ()
                                          (bms/pdf-midnite-amber))) ; automatically turns on midnight-mode for pdfs
          )

        (use-package auctex-latexmk
          :ensure t
          :config
          (auctex-latexmk-setup)
          (setq auctex-latexmk-inherit-TeX-PDF-mode t))

        (use-package reftex
          :ensure t
          :defer t
          :config
          (setq reftex-cite-prompt-optional-args t)) ;; Prompt for empty optional arguments in cite

        (use-package company-auctex
          :ensure t
          :init (company-auctex-init))

        (use-package tex
          :ensure auctex
          :mode ("\\.tex\\'" . latex-mode)
          :config (progn
                    (setq TeX-source-correlate-mode t)
                    (setq TeX-source-correlate-method 'synctex)
                    (setq TeX-auto-save t)
                    (setq TeX-parse-self t)
                    (setq-default TeX-master "main.tex")
                    (setq reftex-plug-into-AUCTeX t)
                    (pdf-tools-install)
                    (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
                          TeX-source-correlate-start-server t)
                    ;; Update PDF buffers after successful LaTeX runs
                    (add-hook 'TeX-after-compilation-finished-functions
                              #'TeX-revert-document-buffer)
                    (add-hook 'LaTeX-mode-hook
                              (lambda ()
                                (reftex-mode t)
                                (flyspell-mode t)))
                    ))

          (add-hook `tex-mode `lsp)

  (setq font-latex-fontify-script nil)
  
#+end_src
** Haskell
This is just for syntax highlighting on my xmonad config
#+begin_src emacs-lisp
(use-package haskell-mode)
#+end_src

* Commenting
#+begin_src emacs-lisp
  (use-package evil-nerd-commenter)

  (dan/leader-keys
    "c" `(evilnc-comment-or-uncomment-lines :which-key "comment"))
#+end_src

* Autocomplete
I use company mode to show completion options
#+begin_src emacs-lisp
  (use-package company
    :config
    :hook (prog-mode . company-mode)
    :custom
    (company-idle-delay 0)
    (company-minimum-prefix-length 1))

  (use-package company-box
    :hook (company-mode . company-box-mode))
#+end_src

* Magit
Magit is a brilliant git client for emacs. Forge is used to get issues and PRs from github
#+begin_src emacs-lisp
  (use-package magit)

  (use-package forge
    :after magit)

  (dan/leader-keys
    "g" `(:ignore t :which-key "git")
    "gg" `(magit-status :which-key "status")
    "gl" `(magit-log-current :which-key "log"))
#+end_src
* Projectile
Projectile is a project management package. 
#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :bind-keymap ("C-c p" . projectile-command-map)
    :init
    (when (file-directory-p "~/repos")
      (setq projectile-project-search-path `("~/repos")))
    (setq projectile-switch-project-action `helm-projectile-find-file))

  (use-package helm-projectile
    :init (helm-projectile-on))

  (dan/leader-keys
    "p" `(:ignore t :which-key "Projectile")
    "pp" `(projectile-switch-project :which-key "Switch Project")
    "pf" `(projectile-find-file :which-key "Find Files")
    "pg" `(projectile-ag :which-key "Project Grep"))

#+end_src
** TODO Change project path
There are too many projects in this path. Many of them are git repos that I cloned so I could build myself. I want to keep them however as they contain some configuration. The solution is probably to create a new folder (~\~/projects~ maybe?) and move my actual projects there.
* Which-key
I use which-key to show the available key mappings in a series. This is useful for discovering the different functions of my plugins as well as if I forget the key. I have it set to have a 0.3 second delay after me pressing the key for it to show up. This means that it doesn't appear if I know the keys, as generally I'll press them quicker than that.
#+begin_src emacs-lisp
  (use-package which-key
    :init
    (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))
#+end_src
* Rainbow Delimiters
Rainbow delimiters makes brackets have different colours. This is especially useful in emacs lisp as it makes it easier to tell whether I have enough.
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
* Modeline
I use the modeline from Doom Emacs. I'm not particularly attached to this but it does the job
#+begin_src emacs-lisp
  (use-package doom-modeline
    :init
    (doom-modeline-mode 1))
#+end_src
* Backups
I consolidate all my backup files in =~/fileBackups=
#+begin_src emacs-lisp
(setq backup-directiory-alist `(("." . "~/fileBackups")))
#+end_src

